#!/usr/bin/env python
"""
A utility to help create use ipython notebooks to create content for my hugo blog.
"""

from argparse import ArgumentParser
from configparser import ConfigParser
from typing import Union
from pathlib import Path
from shlex import shlex
import subprocess as sp
import nbformat
import jupyter
import re

def render_md_from_notebook(notebook: Union[str, Path], markdown: Union[str, Path]) -> str:
    """
    Take a filepath to a notebook and a filepath to an existing hugo
    post and return a string of the new markdown file
    """

    # This pattern matches the front matter
    patt = re.compile(r'(\+{3}.*\+{3})', re.DOTALL)

    with open(notebook) as nb, open(markdown) as md:
        # use nbconvert to output the notebook as markdown
        notebook_as_md = sp.check_output(f'jupyter nbconvert {notebook} --to markdown --stdout', shell=True).decode()

        # read the front matter from the markdown file
        front_matter = patt.search(md.read()).group(1)

        # combine the front matter and the notebook in markdown format
        return '\n'.join((front_matter, notebook_as_md))

def update_markdown_from_notebook(markdown: Union[str, Path], notebook: Union[str, Path]):
    """
    Update the markdown file on disk from the contents of the notebook
    """
    with open(markdown, 'r+') as md:
        # create the string the notebook as a string
        new_notebook = render_md_from_notebook(notebook, markdown)
        # write the contents of that string to the original notebook
        md.write(new_notebook)
        

def main():
    
    parser = ArgumentParser("Notebook utility")
    parser.add_argument('--config', default='notebook_to_md.ini')
    parser.add_argument('--create', dest='new_file')

    
    args = parser.parse_args()

    config = ConfigParser()
    config.read(args.config)
    notebook_path = config.get('notebooks', 'path').strip("'")
    post_path = config.get('posts', 'path').strip("'")


    # create a new notebook

    if args.new_file:

        # clean up the title of the file to be created
        new_file = '-'.join(word.lower() for word in args.new_file.split())

        # create post using hugo
        sp.check_call(f"hugo new post/{new_file}.md", shell=True)

        # create ipython notebook
        new_notebook = config.get('notebooks', 'path').strip("'") + '/' + new_file + '.ipynb'
        new_notebook_path = Path(new_notebook)
        new_notebook = nbformat.v4.new_notebook()
        with new_notebook_path.open('w') as fp:
            nbformat.write(new_notebook, fp)

        print(new_notebook_path, 'created')

        return
    
    # update all markdown files from their respective notebooks
    
    notebooks_path = Path(config.get('notebooks', 'path').strip("'"))
    for notebook in notebooks_path.iterdir():
        # get the filename for the notebook
        filename = notebook.stem
        # get the corresponding markdown post
        markdown = Path(config.get('posts', 'path').strip("'") + '/' + filename + '.md')
        # update the corresponding post if it exists
        if markdown.exists():
            update_markdown_from_notebook(markdown, notebook)
    

if __name__ == "__main__":
    main()